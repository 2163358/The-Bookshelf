/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package itomarevised;

import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author Hp
 */
public class Return extends javax.swing.JFrame {

    /**
     * Creates new form Borrow
     */
    public Return() {
        initComponents();
        setIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        whitePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        borid = new javax.swing.JTextField();
        bookid = new javax.swing.JTextField();
        done = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("The Bookshelf");
        setResizable(false);

        whitePanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("RETURN BOOK");

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel2.setText("Borrower ID:");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel3.setText("Book ID:");

        borid.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        bookid.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        done.setBackground(new java.awt.Color(0, 153, 51));
        done.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        done.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        done.setLabel("DONE");
        done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout whitePanelLayout = new javax.swing.GroupLayout(whitePanel);
        whitePanel.setLayout(whitePanelLayout);
        whitePanelLayout.setHorizontalGroup(
            whitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(whitePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(whitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(whitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(whitePanelLayout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(18, 18, 18)
                            .addComponent(bookid, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(whitePanelLayout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(borid, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(done, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        whitePanelLayout.setVerticalGroup(
            whitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(whitePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(whitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(borid)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(whitePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bookid, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(done, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(whitePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(whitePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void doneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneActionPerformed
        // TODO add your handling code here:
        int borrower = Integer.parseInt(borid.getText());
        int book = Integer.parseInt(bookid.getText());
        
        boolean borrowerFound;
        boolean found;
        boolean avail;
        
        borrowerFound = borrowerIsFound(borrower);
        found = isFound(book);
        avail = isAvailable(book);
        
        if(borrowerFound == false){
            JOptionPane.showMessageDialog(new Return(), "Invalid borrower id", "Return Book",
                    JOptionPane.ERROR_MESSAGE);
            borid.setText(null);
            bookid.setText(null);
        }
        else if(found == false){
            JOptionPane.showMessageDialog(new Return(), "Book not found", "Return Book",
                    JOptionPane.ERROR_MESSAGE);
            borid.setText(null);
            bookid.setText(null);
        }
        else if(avail == false){
            JOptionPane.showMessageDialog(new Return(), "Book is available", "Return Book",
                    JOptionPane.ERROR_MESSAGE);
            borid.setText(null);
            bookid.setText(null);
        }
        else{
            getRental();
            JOptionPane.showMessageDialog(new Return(), "Book returned successfully",
                    "Return Book", JOptionPane.INFORMATION_MESSAGE);
            compareDate();
            this.dispose();
        }        
    }//GEN-LAST:event_doneActionPerformed

    public Connection getConnection(){
        Connection con;
        try{
            String conStr = "jdbc:mysql://localhost:3306/itoma?user=root&password=";
            con = DriverManager.getConnection(conStr);
            System.out.println("Connection done");
            return con;
        }
        catch(Exception x){
            x.printStackTrace();
            return null;
        }
    }
    
    public String getRental(){
        ArrayList<Rental> list = new ArrayList<>();
        Connection con = getConnection();
        String dueDate = "";
        String dateReturned = getDate();
        //String dateReturned = "02/14/18";
        
        String query = "SELECT * FROM rental";
        
        //String status = "SELECT status FROM books";
        Statement st;
        ResultSet rs;
        PreparedStatement rent;
        PreparedStatement books;
        
        try{
            st = con.createStatement();
            rs = st.executeQuery(query);
            Rental rental;
            
            while(rs.next()){
                rental = new Rental(rs.getInt("borrower_id"), rs.getInt("book_id"), 
                        rs.getString("dateBorrowed"), rs.getString("dueDate"), 
                        rs.getString("dateReturned"), rs.getInt("overdue_fee")); 
       
                list.add(rental);
            }
            for (int i = 0; i < list.size(); i++) {
                if(list.get(i).getBook_id() == Integer.parseInt(bookid.getText())){
                    dueDate = list.get(i).getDueDate();
                }
            }
            
            rent = con.prepareStatement("UPDATE rental SET overdue_fee = '"
                    +compOverdue(dueDate,dateReturned)+"', dateReturned = '"+getDate()+"' "
                    + "WHERE book_id = '"+Integer.parseInt(bookid.getText())+"' ");
            rent.executeUpdate();
            
            System.out.println("Rental update complete");
            
            books = con.prepareStatement("UPDATE books SET status = 'available' "
                    + "WHERE book_id = '"+Integer.parseInt(bookid.getText())+"' ");
            books.executeUpdate();
            
            System.out.println("Books update complete");
            
            System.out.println("Retrieval done");
        }
        catch(Exception x){
            System.out.println("getRental error");
        }
        
        return dueDate;
    }
    
    public boolean isFound(int book_id){
        boolean result = false;
        ArrayList<Book> bookList = new ArrayList<>();
        Connection con = getConnection();

        String query = "SELECT book_id, isbn, title, description, publication_year, status, "
                + "category, CONCAT(last_name, ', ' ,first_name, ' ' ,middle_name) AS author, "
                + "publisher FROM books NATURAL JOIN author NATURAL JOIN publishers";
        
        
        //String status = "SELECT status FROM books";
        Statement st;
        ResultSet rs;
        
        try{
            st = con.createStatement();
            rs = st.executeQuery(query);
            Book book;

            while(rs.next()){
                book = new Book(rs.getInt("book_id"), rs.getString("isbn"), 
                        rs.getString("title"), rs.getString("description"), rs.getInt("publication_year"), rs.getString("status"), 
                        rs.getString("category"), rs.getString("author"), rs.getString("publisher"));
       
                bookList.add(book);
            }
            for (int i = 0; i < bookList.size(); i++) {
                if(bookList.get(i).getBook_id() == book_id){
                    result = true;                             
                }
            }
            
            System.out.println("Retrieval done.");
        }
        catch(Exception x){
            x.printStackTrace();
        }
        return result;
    }
    
    public boolean borrowerIsFound(int borrower_id){
        boolean result = false;
        ArrayList<Borrower> borrowerList = new ArrayList<>();
        Connection con = getConnection();
        
        String query2 = "SELECT * FROM borrowers";
        Statement st2;
        ResultSet rs2;
        
        try{
            st2 = con.createStatement();
            rs2 = st2.executeQuery(query2);
            Borrower borrower;
            
            while(rs2.next()){
                borrower = new Borrower(rs2.getInt("borrower_id"), rs2.getString("fname"),
                        rs2.getString("lname"), rs2.getString("mname"), rs2.getString("gender").charAt(0),
                        rs2.getString("email_address"), rs2.getString("contact_no"), 
                        rs2.getString("current_address"), rs2.getString("borrower_type"));
                borrowerList.add(borrower);
            }   
            
            for (int i = 0; i < borrowerList.size(); i++) {
                if(borrowerList.get(i).getBorrower_id() == borrower_id)
                    result = true;
            }
            
            System.out.println("Borrower retrieval done.");
        }
        catch(Exception x){
            System.out.println("Error in borrower isFound");
        }
        
        return result;
    }
    
    public boolean isAvailable(int book_id){
        boolean result = false;
        ArrayList<Book> bookList = new ArrayList<>();
        Connection con = getConnection();

        String query = "SELECT book_id, isbn, title, description, publication_year, status, "
                + "category, CONCAT(last_name, ', ' ,first_name, ' ' ,middle_name) AS author, "
                + "publisher FROM books NATURAL JOIN author NATURAL JOIN publishers";
        
        //String status = "SELECT status FROM books";
        Statement st;
        ResultSet rs;
        
        try{
            st = con.createStatement();
            rs = st.executeQuery(query);
            Book book;
            while(rs.next()){
                book = new Book(rs.getInt("book_id"), rs.getString("isbn"), 
                        rs.getString("title"), rs.getString("description"), rs.getInt("publication_year"), rs.getString("status"), 
                        rs.getString("category"), rs.getString("author"), rs.getString("publisher"));
       
                bookList.add(book);
            }
            for (int i = 0; i < bookList.size(); i++) {
                if(bookList.get(i).getBook_id() == book_id){
                    int x = i;
                    if(bookList.get(x).getStatus().equals("unavailable")){
                        result = true;
                    }         
                }
            }
            System.out.println("Retrieval done.");
        }
        catch(Exception x){
            x.printStackTrace();
        }
        return result;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Return().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bookid;
    private javax.swing.JTextField borid;
    private java.awt.Button done;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel whitePanel;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().
                getResource("/icons/frameicon2.png")));
    }
    
    private String getDate(){
        DateFormat df = new SimpleDateFormat("MM/dd/yy");
        Date dateobj = new Date();
        String date = df.format(dateobj);
        System.out.println("Date today: " + date);
        
        return date;
    }
    
    private int compOverdue(String dueDate, String dateReturned){
        int overdue = 0;
        int temp1 = 0;
        int temp2 = 0;
        int temp3 = 0;
        int ctr = 0;
        
        String[] db = dueDate.split("/");
        int monthDue = Integer.parseInt(db[0]);
        int dayDue = Integer.parseInt(db[1]);
        int yearDue = Integer.parseInt(db[2]);
        
        String[] dr = dateReturned.split("/");
        int monthRet = Integer.parseInt(dr[0]);
        int dayRet = Integer.parseInt(dr[1]);
        int yearRet = Integer.parseInt(dr[2]);
        
        if(dayRet > dayDue && monthDue == monthRet){
            temp1 = dayRet - dayDue;
            overdue = temp1 * 25;
        }
        else if(dayRet <= dayDue && monthDue != monthRet){
            temp1 = dayDue - dayRet;
            temp2 = temp1 * 25;
            while(monthRet > monthDue){
                monthDue++;
                ctr++;
                temp3 = ctr * 750;
            } 
            overdue = temp3 - temp2;
        }
        else if(dayRet >= dayDue && monthDue != monthRet){
            temp1 = dayRet - dayDue;
            temp2 = temp1 * 25;
            while(monthRet > monthDue){
                monthDue++;
                ctr++;
                temp3 = ctr * 750;
            } 
            overdue = temp3 + temp2;
        }
        else{
            overdue = 0;
        }
        
        return overdue;
    }
    
    private void compareDate(){
        String dueDate = getRental();
        String dateReturned = getDate();
        //String dateReturned = "02/14/18";
        
        String[] db = dueDate.split("/");
        int monthDue = Integer.parseInt(db[0]);
        int dayDue = Integer.parseInt(db[1]);
        int yearDue = Integer.parseInt(db[2]);
        
        String[] dr = dateReturned.split("/");
        int monthRet = Integer.parseInt(dr[0]);
        int dayRet = Integer.parseInt(dr[1]);
        int yearRet = Integer.parseInt(dr[2]);
        
        if(monthRet > monthDue || dayRet > dayDue){
            JOptionPane.showMessageDialog(new Return(), "Book return is overdue,"
                    + "please pay PHP " + compOverdue(dueDate, dateReturned)+ ". Thank you."
                    , "Overdue", JOptionPane.INFORMATION_MESSAGE);
        }
    }
}
