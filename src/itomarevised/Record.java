/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package itomarevised;

import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hp
 */
public class Record extends javax.swing.JFrame {

    /**
     * Creates new form Record
     */
    public Record() {
        initComponents();
        setIcon();
        showBorrowersList("SELECT book_id, isbn, title, borrower_id, CONCAT (fname, ' ', mname, ' ', lname) AS borrower, "
                + "dateBorrowed, dueDate FROM books NATURAL JOIN rental NATURAL JOIN borrowers "
                + "WHERE status = 'unavailable'");
        
        Toolkit tool = Toolkit.getDefaultToolkit();
        int width = (int)tool.getScreenSize().getWidth();
        int height = (int)tool.getScreenSize().getWidth();
        
        this.setSize(width, height);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        greenPanel = new javax.swing.JPanel();
        back = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        searchbar = new javax.swing.JTextField();
        goButton = new java.awt.Button();
        clearButton = new java.awt.Button();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        recordsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("The Bookshelf");
        setResizable(false);

        greenPanel.setBackground(new java.awt.Color(0, 153, 51));
        greenPanel.setPreferredSize(new java.awt.Dimension(280, 388));

        back.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/back.png"))); // NOI18N
        back.setText("BACK");
        back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("RECORDS");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/record white.png"))); // NOI18N

        jLayeredPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(25, 25, 25))))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel3.setText("Search");

        searchbar.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        searchbar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbarActionPerformed(evt);
            }
        });

        goButton.setBackground(new java.awt.Color(51, 51, 255));
        goButton.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        goButton.setLabel("GO");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        clearButton.setLabel("CLEAR");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout greenPanelLayout = new javax.swing.GroupLayout(greenPanel);
        greenPanel.setLayout(greenPanelLayout);
        greenPanelLayout.setHorizontalGroup(
            greenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(greenPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(searchbar, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(greenPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(greenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(back))
                .addContainerGap(38, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(goButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
        );
        greenPanelLayout.setVerticalGroup(
            greenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(greenPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(back)
                .addGap(39, 39, 39)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(greenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(searchbar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(greenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(goButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N

        recordsTable.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        recordsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "ISBN", "Title", "Borrower ID", "First Name", "Middle Name", "Last Name", "Date Borrowed", "Due Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(recordsTable);
        if (recordsTable.getColumnModel().getColumnCount() > 0) {
            recordsTable.getColumnModel().getColumn(0).setResizable(false);
            recordsTable.getColumnModel().getColumn(0).setPreferredWidth(0);
            recordsTable.getColumnModel().getColumn(1).setResizable(false);
            recordsTable.getColumnModel().getColumn(1).setPreferredWidth(0);
            recordsTable.getColumnModel().getColumn(2).setResizable(false);
            recordsTable.getColumnModel().getColumn(2).setPreferredWidth(0);
            recordsTable.getColumnModel().getColumn(3).setResizable(false);
            recordsTable.getColumnModel().getColumn(3).setPreferredWidth(0);
            recordsTable.getColumnModel().getColumn(4).setResizable(false);
            recordsTable.getColumnModel().getColumn(4).setPreferredWidth(0);
            recordsTable.getColumnModel().getColumn(5).setResizable(false);
            recordsTable.getColumnModel().getColumn(5).setPreferredWidth(0);
            recordsTable.getColumnModel().getColumn(6).setResizable(false);
            recordsTable.getColumnModel().getColumn(6).setPreferredWidth(0);
            recordsTable.getColumnModel().getColumn(7).setResizable(false);
            recordsTable.getColumnModel().getColumn(7).setPreferredWidth(0);
            recordsTable.getColumnModel().getColumn(8).setResizable(false);
            recordsTable.getColumnModel().getColumn(8).setPreferredWidth(0);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(greenPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(greenPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        // TODO add your handling code here:
        this.hide();
        new Menu().setVisible(true);
    }//GEN-LAST:event_backMouseClicked

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        DefaultTableModel table = (DefaultTableModel)recordsTable.getModel();
        table.setRowCount(0);
        String query;        
        query = "SELECT book_id, isbn, title, borrower_id, CONCAT (fname, ' ', mname, ' ', lname) AS borrower, "
                + "dateBorrowed, dueDate FROM books NATURAL JOIN rental NATURAL JOIN borrowers "
                + "WHERE status = 'unavailable' AND (book_id = '"+searchbar.getText()+"' "
                + "OR isbn = '"+searchbar.getText()+"' OR borrower_id = '"+searchbar.getText()+"')";      
        
        boolean result = false;
        result = isFound(searchbar.getText(),result, query);
        if(result == false){ 
            showBorrowersList("SELECT book_id, isbn, title, borrower_id, CONCAT (fname, ' ', mname, ' ', lname) AS borrower,"
                    + "dateBorrowed, dueDate FROM books NATURAL JOIN rental NATURAL JOIN borrowers "
                    + "WHERE status = 'unavailable' AND (title LIKE '%"+searchbar.getText()+"%' OR CONCAT (fname, ' ', mname, ' ', lname) LIKE '%"+searchbar.getText()+"%')");
        }else{            
            showBorrowersList(query);
        }
        
        int rows = recordsTable.getRowCount();        
        if(rows == 0){
            JOptionPane.showMessageDialog(null, "Search item not found", "Error", JOptionPane.ERROR_MESSAGE);
            showBorrowersList("SELECT book_id, isbn, title, borrower_id, CONCAT (fname, ' ', mname, ' ', lname) AS borrower,"
                    + "dateBorrowed, dueDate FROM books NATURAL JOIN rental NATURAL JOIN borrowers "
                    + "WHERE status = 'unavailable'");
            searchbar.setText(null);
        }
    }//GEN-LAST:event_goButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        DefaultTableModel table = (DefaultTableModel)recordsTable.getModel();
        table.setRowCount(0);
        showBorrowersList("SELECT book_id, isbn, title, borrower_id, CONCAT (fname, ' ', mname, ' ', lname) AS borrower,"
                + "dateBorrowed, dueDate FROM books NATURAL JOIN rental NATURAL JOIN borrowers "
                + "WHERE status = 'unavailable'");
        searchbar.setText(null);
    }//GEN-LAST:event_clearButtonActionPerformed

    private void searchbarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbarActionPerformed
        DefaultTableModel table = (DefaultTableModel)recordsTable.getModel();
        table.setRowCount(0);
        String query;        
        query = "SELECT book_id, isbn, title, borrower_id, CONCAT (fname, ' ', mname, ' ', lname) AS borrower, "
                + "dateBorrowed, dueDate FROM books NATURAL JOIN rental NATURAL JOIN borrowers "
                + "WHERE status = 'unavailable' AND (book_id = '"+searchbar.getText()+"' "
                + "OR isbn = '"+searchbar.getText()+"' OR borrower_id = '"+searchbar.getText()+"')";
        
        boolean result = false;
        result = isFound(searchbar.getText(),result, query);
        if(result == false){ 
            showBorrowersList("SELECT book_id, isbn, title, borrower_id, CONCAT (fname, ' ', mname, ' ', lname) AS borrower,"
                    + "dateBorrowed, dueDate FROM books NATURAL JOIN rental NATURAL JOIN borrowers "
                    + "WHERE status = 'unavailable' AND (title LIKE '%"+searchbar.getText()+"%' OR CONCAT (fname, ' ', mname, ' ', lname) LIKE '%"+searchbar.getText()+"%')");
        }else{            
            showBorrowersList(query);
        }
        
        int rows = recordsTable.getRowCount();        
        if(rows == 0){
            JOptionPane.showMessageDialog(null, "Search item not found", "Error", JOptionPane.ERROR_MESSAGE);
            showBorrowersList("SELECT book_id, isbn, title, borrower_id, CONCAT (fname, ' ', mname, ' ', lname) AS borrower,"
                    + "dateBorrowed, dueDate FROM books NATURAL JOIN rental NATURAL JOIN borrowers "
                    + "WHERE status = 'unavailable'");
            searchbar.setText(null);
        }
    }//GEN-LAST:event_searchbarActionPerformed
    
    public Connection getConnection(){
        Connection connection;
        try{
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/itoma?user=root&password=");
            return connection;
        }catch(Exception ex){
            ex.printStackTrace();
            return null;
        }
    }  
    
    public ArrayList<BookBorrower> showBorrowersList(String query){
        ArrayList<BookBorrower> list = new ArrayList<BookBorrower>();
        Connection connection = getConnection();
        
        Statement stmnt;
        ResultSet result;
        
        try{
            stmnt = connection.createStatement();
            result = stmnt.executeQuery(query);
            BookBorrower b;
            while(result.next()){
                b = new BookBorrower(result.getInt("book_id"),
                        result.getString("isbn"),result.getString("title"),
                        result.getInt("borrower_id"),result.getString("borrower"),
                        result.getString("dateBorrowed"),result.getString("dueDate"));
                list.add(b);
            }
            
            DefaultTableModel table = (DefaultTableModel)recordsTable.getModel();
            Object[] row = new Object[7];
            for(int x = 0; x < list.size(); x++){
                row[0] = list.get(x).getBookID();
                row[1] = list.get(x).getIsbn();
                row[2] = list.get(x).getTitle();
                row[3] = list.get(x).getBorrowerID();
                row[4] = list.get(x).getBorrowername();
                row[5] = list.get(x).getBorrowed_date();
                row[6] = list.get(x).getDuedate();

                table.addRow(row);
            }
        
        }catch(Exception e){
            e.printStackTrace();
        }
        
        return list;
    }
    
    public boolean isFound(String search, boolean found, String query){        
        ArrayList<BookBorrower> list = new ArrayList<BookBorrower>();
        Connection connection = getConnection();
        
        Statement stmnt;
        ResultSet result;
        
        try{
            stmnt = connection.createStatement();
            result = stmnt.executeQuery(query);
            BookBorrower b;
            while(result.next()){
                b = new BookBorrower(result.getInt("book_id"),
                        result.getString("isbn"),result.getString("title"),
                        result.getInt("borrower_id"),result.getString("borrower"),
                        result.getString("dateBorrowed"),result.getString("dueDate"));
                list.add(b);
            }
            for(int i = 0; i < list.size(); i++){                
                if(list.get(i).getIsbn().equalsIgnoreCase(search) 
                        || list.get(i).getBookID() == Integer.parseInt(search) 
                        || list.get(i).getBorrowerID() == Integer.parseInt(search)){
                    found = true;
                }
            }
            
        }catch(Exception e){
            e.printStackTrace();
        }
        
        return found;        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Record.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Record.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Record.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Record.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Record().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel back;
    private java.awt.Button clearButton;
    private java.awt.Button goButton;
    private javax.swing.JPanel greenPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable recordsTable;
    private javax.swing.JTextField searchbar;
    // End of variables declaration//GEN-END:variables
    
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().
                getResource("/icons/frameicon2.png")));
    }
        
}
